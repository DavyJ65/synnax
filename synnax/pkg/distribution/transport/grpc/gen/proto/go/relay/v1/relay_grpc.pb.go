// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: relay/v1/relay.proto

package relayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayServiceClient is the client API for RelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayServiceClient interface {
	Relay(ctx context.Context, opts ...grpc.CallOption) (RelayService_RelayClient, error)
}

type relayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayServiceClient(cc grpc.ClientConnInterface) RelayServiceClient {
	return &relayServiceClient{cc}
}

func (c *relayServiceClient) Relay(ctx context.Context, opts ...grpc.CallOption) (RelayService_RelayClient, error) {
	stream, err := c.cc.NewStream(ctx, &RelayService_ServiceDesc.Streams[0], "/relay.v1.RelayService/Relay", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayServiceRelayClient{stream}
	return x, nil
}

type RelayService_RelayClient interface {
	Send(*RelayRequest) error
	Recv() (*RelayResponse, error)
	grpc.ClientStream
}

type relayServiceRelayClient struct {
	grpc.ClientStream
}

func (x *relayServiceRelayClient) Send(m *RelayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayServiceRelayClient) Recv() (*RelayResponse, error) {
	m := new(RelayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayServiceServer is the server API for RelayService service.
// All implementations should embed UnimplementedRelayServiceServer
// for forward compatibility
type RelayServiceServer interface {
	Relay(RelayService_RelayServer) error
}

// UnimplementedRelayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRelayServiceServer struct {
}

func (UnimplementedRelayServiceServer) Relay(RelayService_RelayServer) error {
	return status.Errorf(codes.Unimplemented, "method Relay not implemented")
}

// UnsafeRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServiceServer will
// result in compilation errors.
type UnsafeRelayServiceServer interface {
	mustEmbedUnimplementedRelayServiceServer()
}

func RegisterRelayServiceServer(s grpc.ServiceRegistrar, srv RelayServiceServer) {
	s.RegisterService(&RelayService_ServiceDesc, srv)
}

func _RelayService_Relay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServiceServer).Relay(&relayServiceRelayServer{stream})
}

type RelayService_RelayServer interface {
	Send(*RelayResponse) error
	Recv() (*RelayRequest, error)
	grpc.ServerStream
}

type relayServiceRelayServer struct {
	grpc.ServerStream
}

func (x *relayServiceRelayServer) Send(m *RelayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayServiceRelayServer) Recv() (*RelayRequest, error) {
	m := new(RelayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayService_ServiceDesc is the grpc.ServiceDesc for RelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.v1.RelayService",
	HandlerType: (*RelayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Relay",
			Handler:       _RelayService_Relay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "relay/v1/relay.proto",
}
