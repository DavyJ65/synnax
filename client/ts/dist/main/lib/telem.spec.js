"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const telem_1 = require("./telem");
// |||||| TimeStamp ||||||
(0, ava_1.default)('TimeStamp - construct', (t) => {
    const ts = new telem_1.TimeStamp(1000);
    t.true(ts.equals(telem_1.TimeSpan.Microseconds()));
});
(0, ava_1.default)('TimeStamp - span', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.span(new telem_1.TimeStamp(1000)).equals(telem_1.TimeSpan.Microseconds()));
});
(0, ava_1.default)('TimeStamp - range', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts
        .range(new telem_1.TimeStamp(1000))
        .equals(new telem_1.TimeRange(ts, telem_1.TimeSpan.Microseconds())));
});
(0, ava_1.default)('TimeStamp - spanRange', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts
        .spanRange(telem_1.TimeSpan.Microseconds())
        .equals(new telem_1.TimeRange(ts, ts.add(telem_1.TimeSpan.Microseconds()))));
});
(0, ava_1.default)('TimeStamp - isZero', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.isZero());
});
(0, ava_1.default)('TimeStamp - after', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.after(new telem_1.TimeStamp(-1)));
    const ts2 = new telem_1.TimeStamp(1);
    t.false(ts2.after(new telem_1.TimeStamp(1)));
});
(0, ava_1.default)('TimeStamp - before', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.before(new telem_1.TimeStamp(1)));
    const ts2 = new telem_1.TimeStamp(1);
    t.false(ts2.before(new telem_1.TimeStamp(1)));
});
(0, ava_1.default)('TimeStamp - beforeEq', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.beforeEq(new telem_1.TimeStamp(1)));
    const ts2 = new telem_1.TimeStamp(1);
    t.true(ts2.beforeEq(new telem_1.TimeStamp(1)));
    const ts3 = new telem_1.TimeStamp(2);
    t.false(ts3.beforeEq(new telem_1.TimeStamp(1)));
});
(0, ava_1.default)('TimeStamp - afterEq', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts.afterEq(new telem_1.TimeStamp(-1)));
    const ts2 = new telem_1.TimeStamp(1);
    t.true(ts2.afterEq(new telem_1.TimeStamp(1)));
    const ts3 = new telem_1.TimeStamp(0);
    t.false(ts3.afterEq(new telem_1.TimeStamp(1)));
});
(0, ava_1.default)('TimeStamp - add', (t) => {
    const ts = new telem_1.TimeStamp(0);
    t.true(ts
        .add(telem_1.TimeSpan.Microseconds())
        .equals(new telem_1.TimeStamp(telem_1.TimeSpan.Microseconds(1))));
});
(0, ava_1.default)('TimeStamp - sub', (t) => {
    const ts = new telem_1.TimeStamp(telem_1.TimeSpan.Microseconds());
    t.true(ts.sub(telem_1.TimeSpan.Microseconds()).equals(new telem_1.TimeStamp(0)));
});
// |||||| TimeSpan ||||||
(0, ava_1.default)('TimeSpan - construct from static', (t) => {
    t.true(telem_1.TimeSpan.Nanoseconds(1).equals(1));
    t.true(telem_1.TimeSpan.Microseconds(1).equals(1000));
    t.true(telem_1.TimeSpan.Milliseconds(1).equals(1000000));
    t.true(telem_1.TimeSpan.Seconds(1).equals(1e9));
    t.true(telem_1.TimeSpan.Minutes(1).equals(6e10));
    t.true(telem_1.TimeSpan.Hours(1).equals(36e11));
});
(0, ava_1.default)('TimeSpan - seconds', (t) => {
    t.is(telem_1.TimeSpan.Seconds(1).seconds(), 1);
});
(0, ava_1.default)('TimeSpan - isZero', (t) => {
    t.true(telem_1.TimeSpan.Zero.isZero());
    t.false(telem_1.TimeSpan.Seconds(1).isZero());
});
(0, ava_1.default)('TimeSpan - add', (t) => {
    t.true(telem_1.TimeSpan.Seconds(1).add(telem_1.TimeSpan.Second).equals(2e9));
});
(0, ava_1.default)('TimeSpan - sub', (t) => {
    t.true(telem_1.TimeSpan.Seconds(1).sub(telem_1.TimeSpan.Second).isZero());
});
// |||||| Rate ||||||
(0, ava_1.default)('Rate - construct', (t) => {
    t.true(new telem_1.Rate(1).equals(1));
});
(0, ava_1.default)('Rate - period', (t) => {
    t.true(new telem_1.Rate(1).period().equals(telem_1.TimeSpan.Second));
});
(0, ava_1.default)('Rate - sampleCount', (t) => {
    t.true(new telem_1.Rate(1).sampleCount(telem_1.TimeSpan.Second) == 1);
});
(0, ava_1.default)('Rate - byteCount', (t) => {
    t.true(new telem_1.Rate(1).byteCount(telem_1.TimeSpan.Second, telem_1.Density.Bit64) == 8);
});
(0, ava_1.default)('Rate - span', (t) => {
    t.true(new telem_1.Rate(1).span(4).equals(telem_1.TimeSpan.Seconds(4)));
});
(0, ava_1.default)('Rate - byteSpan', (t) => {
    t.true(new telem_1.Rate(1)
        .byteSpan(new telem_1.Size(32), telem_1.Density.Bit64)
        .equals(telem_1.TimeSpan.Seconds(4)));
});
(0, ava_1.default)('Rate - Hz', (t) => {
    t.true(telem_1.Rate.Hz(1).equals(1));
});
(0, ava_1.default)('Rate - KHz', (t) => {
    t.true(telem_1.Rate.KHz(1).equals(1e3));
});
// |||||| TimeRange ||||||
(0, ava_1.default)('TimeRange - construct', (t) => {
    const tr = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(1000));
    t.true(tr.start.equals(new telem_1.TimeStamp(0)));
    t.true(tr.end.equals(new telem_1.TimeStamp(1000)));
});
(0, ava_1.default)('TimeRange - span', (t) => {
    const tr = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(1000));
    t.true(tr.span().equals(telem_1.TimeSpan.Microsecond));
});
(0, ava_1.default)('TimeRange - isValid', (t) => {
    const tr = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(1000));
    t.true(tr.isValid());
    const tr2 = new telem_1.TimeRange(new telem_1.TimeStamp(1000), new telem_1.TimeStamp(0));
    t.false(tr2.isValid());
});
(0, ava_1.default)('TimeRange - isZero', (t) => {
    const tr = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(0));
    t.true(tr.isZero());
    const tr2 = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(1000));
    t.false(tr2.isZero());
});
(0, ava_1.default)('TimeRange - swap', (t) => {
    const tr = new telem_1.TimeRange(new telem_1.TimeStamp(0), new telem_1.TimeStamp(1000));
    t.true(tr.swap().equals(new telem_1.TimeRange(new telem_1.TimeStamp(1000), new telem_1.TimeStamp(0))));
});
// |||||| DATA TYPE ||||||
(0, ava_1.default)('DataType - json serialization', (t) => {
    const dt = telem_1.DataType.Int32;
    const v = JSON.parse(JSON.stringify({ dt }));
    t.true(v.dt === 'int32');
});
//# sourceMappingURL=data:application/json;base64,